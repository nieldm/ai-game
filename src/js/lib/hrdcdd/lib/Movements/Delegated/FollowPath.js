// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Phaser', 'KinematicSteeringOutput', 'Seek'], function(Phaser, KinematicSteeringOutput, Seek) {
    var FollowPath;
    FollowPath = (function(_super) {
      __extends(FollowPath, _super);

      function FollowPath(character, maxAcceleration, maxPrediction, currentPos, path) {
        this.character = character;
        this.maxPrediction = maxPrediction;
        this.maxAcceleration = maxAcceleration;
        this.currentPos = currentPos;
        this.pathOffset = new Phaser.Point(1, 1);
        this.path = path;
      }

      FollowPath.prototype.getSteering = function() {
        var currentParam, delSeek, futurePos, predictVelocity, target, targetParam;
        predictVelocity = new Phaser.Point(this.character.velocity.x, this.character.velocity.y);
        futurePos = Phaser.Point.add(this.character.position, predictVelocity.multiply(this.maxPrediction, this.maxPrediction));
        currentParam = this.path.getParam(futurePos, this.currentPos);
        if (currentParam != null) {
          targetParam = currentParam;
          target = [
            {
              position: targetParam
            }
          ];
          delSeek = new Seek(this.character, target[0], this.maxAcceleration);
          return delSeek.getSteering();
        } else {
          return null;
        }
      };

      return FollowPath;

    })(Phaser.Sprite);
    return FollowPath;
  });

}).call(this);
